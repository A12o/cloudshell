#!/usr/local/bin//zsh
##!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

echo "\n\tExecuting custom pre-commit hooks,\n\tYAML, TODO tasks and Whitespace Checks. \n\tSee global .gitconfig for details.\n\tgit config --global --get core.hookspath\n"

exec < /dev/tty  # Open Stdin to read user inputs
# check yaml
unset check_yaml
unset break_commit
echo "\n\033[1;36mShould I Break Commit for YAML Errors?\033[0m\n"
for i in {15..1}
do
    echo -n "waiting for \033[1;33m$i\033[0m seconds, (y/N)[n] : \r"
    read -s -t 1 -q check_yaml
    if [[ -n "$check_yaml" ]] then break
    fi
done
exec <&-  # close Stdin
check_yaml=${check_yaml:-n}   # set default value to n
echo "\n"
echo "\033[1;32mResponse was $check_yaml\033[0m\n"
if [[ $check_yaml == "y" ]] then
    echo "Checking yml/yaml files in current directory tree\n"
    for i in $(find . -name '*.yml' -o -name '*.yaml')
        do ruby -e "require 'yaml';YAML.load_file(\"$i\")"
        if [[ $? != 0 ]] then
            break_commit=1
            echo -n "\n\033[1;31mFailed YAML check on: \033[32m$i\033[0m\n\n"
        fi
    done
fi
if [[ $break_commit == 1 ]] then exit 1; fi
#
exec < /dev/tty  # Open Stdin to read user inputs
# check TODO
unset check_TODO
unset break_commit
echo "\n\033[1;36mShould I Break Commit for Comments labelled TODO:?\033[0m\n"
for i in {15..1}
do
    echo -n "waiting for \033[1;33m$i\033[0m seconds, (y/N)[n] : \r"
    read -s -t 1 -q check_TODO
    if [[ -n "$check_TODO" ]] then break
    fi
done
exec <&-  # close Stdin
check_TODO=${check_TODO:-n}   # set default value to n
echo "\n"
echo "\033[1;32mResponse was $check_TODO\033[0m\n"
if [[ $check_TODO == "y" ]] then
    echo -n "Checking files in current directory tree for comments labelled TODO:"
    echo "\n"
    # grep -R 'TODO:' *
    rg --trim -np -F "TODO:" *
    if [[ $? == 0 ]] then
    echo "\n"
    exit 1
    fi      # Break Commit on finding TODO
fi
#
exec < /dev/tty  # Open Stdin to read user inputs
# check whitespace
unset check_whitespace
echo "\n\033[1;36mShould I Break Commit for Whitespace Errors?"
echo "Only ignoring blank line(s) used as Readability Separator(s) and EOF!\033[0m\n"
for i in {30..1}
do
    echo -n "waiting for \033[1;33m$i\033[0m seconds, (y/N)[n] : \r"
    read -s -t 1 -q check_whitespace
    if [[ -n "$check_whitespace" ]] then break
    fi
done
exec <&-  # close Stdin
check_whitespace=${check_whitespace:-n}   # set default value to n
echo "\n"
echo "\033[1;32mResponse was $check_whitespace\033[0m\n"

# # If there are whitespace errors, print the offending file names and fail.
if [[ $check_whitespace == "y" ]] then
    # \echo "Whitespace Checks ignoring blank-at-eof, see .gitconfig global\n"
    exec git diff-index --check --cached $against --
fi
